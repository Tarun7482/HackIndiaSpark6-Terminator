{"ast":null,"code":"import{BrowserProvider,getAddress,formatUnits,Contract}from\"ethers\";import MEDICAL_ABI from\"../abis/MedicalRecord.json\";import{providerLoaded,networkLoaded,accountLoaded,etherBalanceLoaded}from'./reducer';// Load Provider\nexport const loadProvider=dispatch=>{console.log('Loading provider...');const connection=new BrowserProvider(window.ethereum);console.log('Provider loaded:',connection);dispatch(providerLoaded({connection}));return connection;};// Load Network\nexport const loadNetwork=async(provider,dispatch)=>{console.log('Loading network...');const network=await provider.getNetwork();const chainId=network.chainId;console.log('Network loaded:',network);console.log('ChainId:',chainId,'Type:',typeof chainId);const chainIdString=typeof chainId==='bigint'?chainId.toString():chainId;console.log('ChainIdString:',chainIdString);dispatch(networkLoaded({chainId:chainIdString}));return chainIdString;};// Load Account\nexport const loadAccount=async(provider,dispatch)=>{console.log('Loading account...');console.log('Provider:',provider);if(!provider){console.error('Provider is null. Initializing new provider.');provider=new BrowserProvider(window.ethereum);}console.log('Requesting accounts...');const accounts=await window.ethereum.request({method:\"eth_requestAccounts\"});console.log('Accounts:',accounts);const account=getAddress(accounts[0]);console.log('Selected account:',account);dispatch(accountLoaded({account}));console.log('Fetching balance...');let balance=await provider.getBalance(account);console.log('Raw balance:',balance.toString());const balanceInEther=formatUnits(balance,'ether');console.log('Formatted balance:',balanceInEther);const balanceAsString=balanceInEther.toString();console.log('Balance as string:',balanceAsString);dispatch(etherBalanceLoaded({balance:balanceAsString}));};// Load Medical\nexport const loadMedical=(provider,address,dispatch)=>{const medical=new Contract(address,MEDICAL_ABI,provider);return medical;};export const submitRecord=async(name,age,gender,bloodType,allergies,diagnosis,treatment,provider,medical,dispatch)=>{let transaction;dispatch({type:\"NEW_RECORD_LOADED\"});try{const signer=await provider.getSigner();transaction=await medical.connect(signer).addRecord(name,age,gender,bloodType,allergies,diagnosis,treatment);await transaction.wait();// You might want to dispatch a success action here\ndispatch({type:\"NEW_RECORD_SUCCESS\"});}catch(error){console.error(\"Error submitting record:\",error);dispatch({type:\"NEW_RECORD_FAIL\"});}};","map":{"version":3,"names":["BrowserProvider","getAddress","formatUnits","Contract","MEDICAL_ABI","providerLoaded","networkLoaded","accountLoaded","etherBalanceLoaded","loadProvider","dispatch","console","log","connection","window","ethereum","loadNetwork","provider","network","getNetwork","chainId","chainIdString","toString","loadAccount","error","accounts","request","method","account","balance","getBalance","balanceInEther","balanceAsString","loadMedical","address","medical","submitRecord","name","age","gender","bloodType","allergies","diagnosis","treatment","transaction","type","signer","getSigner","connect","addRecord","wait"],"sources":["D:/HackIndia/my-react-app/app/src/store/interactions.js"],"sourcesContent":["import { BrowserProvider, getAddress, formatUnits, Contract } from \"ethers\";\r\nimport MEDICAL_ABI from \"../abis/MedicalRecord.json\";\r\nimport { providerLoaded, networkLoaded, accountLoaded, etherBalanceLoaded } from './reducer';\r\n\r\n// Load Provider\r\nexport const loadProvider = (dispatch) => {\r\n  console.log('Loading provider...');\r\n  const connection = new BrowserProvider(window.ethereum);\r\n  console.log('Provider loaded:', connection);\r\n  dispatch(providerLoaded({ connection }));\r\n  return connection;\r\n};\r\n\r\n// Load Network\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  console.log('Loading network...');\r\n  const network = await provider.getNetwork();\r\n  const chainId = network.chainId;\r\n  console.log('Network loaded:', network);\r\n  console.log('ChainId:', chainId, 'Type:', typeof chainId);\r\n  const chainIdString = typeof chainId === 'bigint' ? chainId.toString() : chainId;\r\n  console.log('ChainIdString:', chainIdString);\r\n  dispatch(networkLoaded({ chainId: chainIdString }));\r\n  return chainIdString;\r\n};\r\n\r\n// Load Account\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  console.log('Loading account...');\r\n  console.log('Provider:', provider);\r\n  if (!provider) {\r\n    console.error('Provider is null. Initializing new provider.');\r\n    provider = new BrowserProvider(window.ethereum);\r\n  }\r\n  console.log('Requesting accounts...');\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n  console.log('Accounts:', accounts);\r\n  const account = getAddress(accounts[0]);\r\n  console.log('Selected account:', account);\r\n  dispatch(accountLoaded({ account }));\r\n  console.log('Fetching balance...');\r\n  let balance = await provider.getBalance(account);\r\n  console.log('Raw balance:', balance.toString());\r\n  const balanceInEther = formatUnits(balance, 'ether');\r\n  console.log('Formatted balance:', balanceInEther);\r\n  const balanceAsString = balanceInEther.toString();\r\n  console.log('Balance as string:', balanceAsString);\r\n  dispatch(etherBalanceLoaded({ balance: balanceAsString }));\r\n};\r\n\r\n// Load Medical\r\nexport const loadMedical = (provider, address, dispatch) => {\r\n  const medical = new Contract(address, MEDICAL_ABI, provider);\r\n  return medical;\r\n};\r\n\r\nexport const submitRecord = async (\r\n  name,\r\n  age,\r\n  gender,\r\n  bloodType,\r\n  allergies,\r\n  diagnosis,\r\n  treatment,\r\n  provider,\r\n  medical,\r\n  dispatch\r\n) => {\r\n  let transaction;\r\n  dispatch({ type: \"NEW_RECORD_LOADED\" });\r\n  try {\r\n    const signer = await provider.getSigner();\r\n    transaction = await medical\r\n      .connect(signer)\r\n      .addRecord(name, age, gender, bloodType, allergies, diagnosis, treatment);\r\n    await transaction.wait();\r\n    // You might want to dispatch a success action here\r\n    dispatch({ type: \"NEW_RECORD_SUCCESS\" });\r\n  } catch (error) {\r\n    console.error(\"Error submitting record:\", error);\r\n    dispatch({ type: \"NEW_RECORD_FAIL\" });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}