{"ast":null,"code":"import{configureStore}from'@reduxjs/toolkit';import{providerReducer,medicalReducer}from'./reducer';const customSerializableCheck={isSerializable:value=>{if(typeof value==='bigint'){return true;// Consider BigInt as serializable\n}return true;// Consider everything serializable for now\n},getEntries:value=>{return Object.entries(value);}};const store=configureStore({reducer:{provider:providerReducer,medical:medicalReducer},middleware:getDefaultMiddleware=>getDefaultMiddleware({serializableCheck:{...customSerializableCheck}}),devTools:{serialize:{options:{map:value=>{if(typeof value==='bigint'){return value.toString();}return value;}}}}});export default store;","map":{"version":3,"names":["configureStore","providerReducer","medicalReducer","customSerializableCheck","isSerializable","value","getEntries","Object","entries","store","reducer","provider","medical","middleware","getDefaultMiddleware","serializableCheck","devTools","serialize","options","map","toString"],"sources":["D:/HackIndia/my-react-app/app/src/store/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { providerReducer, medicalReducer } from './reducer';\r\n\r\nconst customSerializableCheck = {\r\n  isSerializable: (value) => {\r\n    if (typeof value === 'bigint') {\r\n      return true; // Consider BigInt as serializable\r\n    }\r\n    return true; // Consider everything serializable for now\r\n  },\r\n  getEntries: (value) => {\r\n    return Object.entries(value);\r\n  },\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    provider: providerReducer,\r\n    medical: medicalReducer\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ...customSerializableCheck,\r\n      },\r\n    }),\r\n  devTools: {\r\n    serialize: {\r\n      options: {\r\n        map: (value) => {\r\n          if (typeof value === 'bigint') {\r\n            return value.toString();\r\n          }\r\n          return value;\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default store;"],"mappings":"AAAA,OAASA,cAAc,KAAQ,kBAAkB,CACjD,OAASC,eAAe,CAAEC,cAAc,KAAQ,WAAW,CAE3D,KAAM,CAAAC,uBAAuB,CAAG,CAC9BC,cAAc,CAAGC,KAAK,EAAK,CACzB,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,KAAI,CAAE;AACf,CACA,MAAO,KAAI,CAAE;AACf,CAAC,CACDC,UAAU,CAAGD,KAAK,EAAK,CACrB,MAAO,CAAAE,MAAM,CAACC,OAAO,CAACH,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,KAAM,CAAAI,KAAK,CAAGT,cAAc,CAAC,CAC3BU,OAAO,CAAE,CACPC,QAAQ,CAAEV,eAAe,CACzBW,OAAO,CAAEV,cACX,CAAC,CACDW,UAAU,CAAGC,oBAAoB,EAC/BA,oBAAoB,CAAC,CACnBC,iBAAiB,CAAE,CACjB,GAAGZ,uBACL,CACF,CAAC,CAAC,CACJa,QAAQ,CAAE,CACRC,SAAS,CAAE,CACTC,OAAO,CAAE,CACPC,GAAG,CAAGd,KAAK,EAAK,CACd,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,CAACe,QAAQ,CAAC,CAAC,CACzB,CACA,MAAO,CAAAf,KAAK,CACd,CACF,CACF,CACF,CACF,CAAC,CAAC,CAEF,cAAe,CAAAI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}