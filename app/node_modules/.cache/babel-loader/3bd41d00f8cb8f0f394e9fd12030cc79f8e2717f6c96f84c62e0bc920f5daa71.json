{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { providerReducer, medicalReducer } from './reducer';\nconst customSerializableCheck = {\n  isSerializable: value => {\n    if (typeof value === 'bigint') {\n      return true; // Consider BigInt as serializable\n    }\n    return true; // Consider everything serializable for now\n  },\n  getEntries: value => {\n    return Object.entries(value);\n  }\n};\nconst store = configureStore({\n  reducer: {\n    provider: providerReducer,\n    medical: medicalReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ...customSerializableCheck\n    }\n  }),\n  devTools: {\n    serialize: {\n      options: {\n        map: value => {\n          if (typeof value === 'bigint') {\n            return value.toString();\n          }\n          return value;\n        }\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","providerReducer","medicalReducer","customSerializableCheck","isSerializable","value","getEntries","Object","entries","store","reducer","provider","medical","middleware","getDefaultMiddleware","serializableCheck","devTools","serialize","options","map","toString"],"sources":["D:/HackIndia/my-react-app/app/src/store/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { providerReducer, medicalReducer } from './reducer';\r\n\r\nconst customSerializableCheck = {\r\n  isSerializable: (value) => {\r\n    if (typeof value === 'bigint') {\r\n      return true; // Consider BigInt as serializable\r\n    }\r\n    return true; // Consider everything serializable for now\r\n  },\r\n  getEntries: (value) => {\r\n    return Object.entries(value);\r\n  },\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    provider: providerReducer,\r\n    medical: medicalReducer\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ...customSerializableCheck,\r\n      },\r\n    }),\r\n  devTools: {\r\n    serialize: {\r\n      options: {\r\n        map: (value) => {\r\n          if (typeof value === 'bigint') {\r\n            return value.toString();\r\n          }\r\n          return value;\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,EAAEC,cAAc,QAAQ,WAAW;AAE3D,MAAMC,uBAAuB,GAAG;EAC9BC,cAAc,EAAGC,KAAK,IAAK;IACzB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,IAAI,CAAC,CAAC;IACf;IACA,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;EACDC,UAAU,EAAGD,KAAK,IAAK;IACrB,OAAOE,MAAM,CAACC,OAAO,CAACH,KAAK,CAAC;EAC9B;AACF,CAAC;AAED,MAAMI,KAAK,GAAGT,cAAc,CAAC;EAC3BU,OAAO,EAAE;IACPC,QAAQ,EAAEV,eAAe;IACzBW,OAAO,EAAEV;EACX,CAAC;EACDW,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjB,GAAGZ;IACL;EACF,CAAC,CAAC;EACJa,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,OAAO,EAAE;QACPC,GAAG,EAAGd,KAAK,IAAK;UACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;YAC7B,OAAOA,KAAK,CAACe,QAAQ,CAAC,CAAC;UACzB;UACA,OAAOf,KAAK;QACd;MACF;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAeI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}