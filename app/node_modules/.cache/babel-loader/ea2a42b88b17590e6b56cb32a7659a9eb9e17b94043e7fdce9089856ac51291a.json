{"ast":null,"code":"import { BrowserProvider, getAddress, formatUnits, Contract } from \"ethers\";\nimport MEDICAL_ABI from \"../abis/MedicalRecord.json\";\nimport { providerLoaded, networkLoaded, accountLoaded, etherBalanceLoaded } from './reducer';\n\n// Load Provider\nexport const loadProvider = dispatch => {\n  console.log('Loading provider...');\n  const connection = new BrowserProvider(window.ethereum);\n  console.log('Provider loaded:', connection);\n  dispatch(providerLoaded({\n    connection\n  }));\n  return connection;\n};\n\n// Load Network\nexport const loadNetwork = async (provider, dispatch) => {\n  console.log('Loading network...');\n  const network = await provider.getNetwork();\n  const chainId = network.chainId;\n  console.log('Network loaded:', network);\n  console.log('ChainId:', chainId, 'Type:', typeof chainId);\n  const chainIdString = typeof chainId === 'bigint' ? chainId.toString() : chainId;\n  console.log('ChainIdString:', chainIdString);\n  dispatch(networkLoaded({\n    chainId: chainIdString\n  }));\n  return chainIdString;\n};\n\n// Load Account\nexport const loadAccount = async (provider, dispatch) => {\n  console.log('Loading account...');\n  console.log('Provider:', provider);\n  if (!provider) {\n    console.error('Provider is null. Initializing new provider.');\n    provider = new BrowserProvider(window.ethereum);\n  }\n  console.log('Requesting accounts...');\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  console.log('Accounts:', accounts);\n  const account = getAddress(accounts[0]);\n  console.log('Selected account:', account);\n  dispatch(accountLoaded({\n    account\n  }));\n  console.log('Fetching balance...');\n  let balance = await provider.getBalance(account);\n  console.log('Raw balance:', balance.toString());\n  const balanceInEther = formatUnits(balance, 'ether');\n  console.log('Formatted balance:', balanceInEther);\n  const balanceAsString = balanceInEther.toString();\n  console.log('Balance as string:', balanceAsString);\n  dispatch(etherBalanceLoaded({\n    balance: balanceAsString\n  }));\n};\n\n// Load Medical\nexport const loadMedical = (provider, address, dispatch) => {\n  const medical = new Contract(address, MEDICAL_ABI, provider);\n  return medical;\n};\nexport const submitRecord = async (name, age, gender, bloodType, allergies, diagnosis, treatment, provider, medical, dispatch) => {\n  let transaction;\n  dispatch({\n    type: \"NEW_RECORD_LOADED\"\n  });\n  try {\n    const signer = await provider.getSigner();\n    transaction = await medical.connect(signer).addRecord(name, age, gender, bloodType, allergies, diagnosis, treatment);\n    await transaction.wait();\n    // You might want to dispatch a success action here\n    dispatch({\n      type: \"NEW_RECORD_SUCCESS\"\n    });\n  } catch (error) {\n    console.error(\"Error submitting record:\", error);\n    dispatch({\n      type: \"NEW_RECORD_FAIL\"\n    });\n  }\n};","map":{"version":3,"names":["BrowserProvider","getAddress","formatUnits","Contract","MEDICAL_ABI","providerLoaded","networkLoaded","accountLoaded","etherBalanceLoaded","loadProvider","dispatch","console","log","connection","window","ethereum","loadNetwork","provider","network","getNetwork","chainId","chainIdString","toString","loadAccount","error","accounts","request","method","account","balance","getBalance","balanceInEther","balanceAsString","loadMedical","address","medical","submitRecord","name","age","gender","bloodType","allergies","diagnosis","treatment","transaction","type","signer","getSigner","connect","addRecord","wait"],"sources":["D:/HackIndia/my-react-app/app/src/store/interactions.js"],"sourcesContent":["import { BrowserProvider, getAddress, formatUnits, Contract } from \"ethers\";\r\nimport MEDICAL_ABI from \"../abis/MedicalRecord.json\";\r\nimport { providerLoaded, networkLoaded, accountLoaded, etherBalanceLoaded } from './reducer';\r\n\r\n// Load Provider\r\nexport const loadProvider = (dispatch) => {\r\n  console.log('Loading provider...');\r\n  const connection = new BrowserProvider(window.ethereum);\r\n  console.log('Provider loaded:', connection);\r\n  dispatch(providerLoaded({ connection }));\r\n  return connection;\r\n};\r\n\r\n// Load Network\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  console.log('Loading network...');\r\n  const network = await provider.getNetwork();\r\n  const chainId = network.chainId;\r\n  console.log('Network loaded:', network);\r\n  console.log('ChainId:', chainId, 'Type:', typeof chainId);\r\n  const chainIdString = typeof chainId === 'bigint' ? chainId.toString() : chainId;\r\n  console.log('ChainIdString:', chainIdString);\r\n  dispatch(networkLoaded({ chainId: chainIdString }));\r\n  return chainIdString;\r\n};\r\n\r\n// Load Account\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  console.log('Loading account...');\r\n  console.log('Provider:', provider);\r\n  if (!provider) {\r\n    console.error('Provider is null. Initializing new provider.');\r\n    provider = new BrowserProvider(window.ethereum);\r\n  }\r\n  console.log('Requesting accounts...');\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n  console.log('Accounts:', accounts);\r\n  const account = getAddress(accounts[0]);\r\n  console.log('Selected account:', account);\r\n  dispatch(accountLoaded({ account }));\r\n  console.log('Fetching balance...');\r\n  let balance = await provider.getBalance(account);\r\n  console.log('Raw balance:', balance.toString());\r\n  const balanceInEther = formatUnits(balance, 'ether');\r\n  console.log('Formatted balance:', balanceInEther);\r\n  const balanceAsString = balanceInEther.toString();\r\n  console.log('Balance as string:', balanceAsString);\r\n  dispatch(etherBalanceLoaded({ balance: balanceAsString }));\r\n};\r\n\r\n// Load Medical\r\nexport const loadMedical = (provider, address, dispatch) => {\r\n  const medical = new Contract(address, MEDICAL_ABI, provider);\r\n  return medical;\r\n};\r\n\r\nexport const submitRecord = async (\r\n  name,\r\n  age,\r\n  gender,\r\n  bloodType,\r\n  allergies,\r\n  diagnosis,\r\n  treatment,\r\n  provider,\r\n  medical,\r\n  dispatch\r\n) => {\r\n  let transaction;\r\n  dispatch({ type: \"NEW_RECORD_LOADED\" });\r\n  try {\r\n    const signer = await provider.getSigner();\r\n    transaction = await medical\r\n      .connect(signer)\r\n      .addRecord(name, age, gender, bloodType, allergies, diagnosis, treatment);\r\n    await transaction.wait();\r\n    // You might want to dispatch a success action here\r\n    dispatch({ type: \"NEW_RECORD_SUCCESS\" });\r\n  } catch (error) {\r\n    console.error(\"Error submitting record:\", error);\r\n    dispatch({ type: \"NEW_RECORD_FAIL\" });\r\n  }\r\n};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,UAAU,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,QAAQ;AAC3E,OAAOC,WAAW,MAAM,4BAA4B;AACpD,SAASC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAEC,kBAAkB,QAAQ,WAAW;;AAE5F;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EACxCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClC,MAAMC,UAAU,GAAG,IAAIb,eAAe,CAACc,MAAM,CAACC,QAAQ,CAAC;EACvDJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,UAAU,CAAC;EAC3CH,QAAQ,CAACL,cAAc,CAAC;IAAEQ;EAAW,CAAC,CAAC,CAAC;EACxC,OAAOA,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEP,QAAQ,KAAK;EACvDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACjC,MAAMM,OAAO,GAAG,MAAMD,QAAQ,CAACE,UAAU,CAAC,CAAC;EAC3C,MAAMC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAC/BT,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,OAAO,CAAC;EACvCP,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEQ,OAAO,EAAE,OAAO,EAAE,OAAOA,OAAO,CAAC;EACzD,MAAMC,aAAa,GAAG,OAAOD,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAACE,QAAQ,CAAC,CAAC,GAAGF,OAAO;EAChFT,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAES,aAAa,CAAC;EAC5CX,QAAQ,CAACJ,aAAa,CAAC;IAAEc,OAAO,EAAEC;EAAc,CAAC,CAAC,CAAC;EACnD,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAON,QAAQ,EAAEP,QAAQ,KAAK;EACvDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACjCD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEK,QAAQ,CAAC;EAClC,IAAI,CAACA,QAAQ,EAAE;IACbN,OAAO,CAACa,KAAK,CAAC,8CAA8C,CAAC;IAC7DP,QAAQ,GAAG,IAAIjB,eAAe,CAACc,MAAM,CAACC,QAAQ,CAAC;EACjD;EACAJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,MAAMa,QAAQ,GAAG,MAAMX,MAAM,CAACC,QAAQ,CAACW,OAAO,CAAC;IAC7CC,MAAM,EAAE;EACV,CAAC,CAAC;EACFhB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEa,QAAQ,CAAC;EAClC,MAAMG,OAAO,GAAG3B,UAAU,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvCd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgB,OAAO,CAAC;EACzClB,QAAQ,CAACH,aAAa,CAAC;IAAEqB;EAAQ,CAAC,CAAC,CAAC;EACpCjB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClC,IAAIiB,OAAO,GAAG,MAAMZ,QAAQ,CAACa,UAAU,CAACF,OAAO,CAAC;EAChDjB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiB,OAAO,CAACP,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMS,cAAc,GAAG7B,WAAW,CAAC2B,OAAO,EAAE,OAAO,CAAC;EACpDlB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEmB,cAAc,CAAC;EACjD,MAAMC,eAAe,GAAGD,cAAc,CAACT,QAAQ,CAAC,CAAC;EACjDX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoB,eAAe,CAAC;EAClDtB,QAAQ,CAACF,kBAAkB,CAAC;IAAEqB,OAAO,EAAEG;EAAgB,CAAC,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAChB,QAAQ,EAAEiB,OAAO,EAAExB,QAAQ,KAAK;EAC1D,MAAMyB,OAAO,GAAG,IAAIhC,QAAQ,CAAC+B,OAAO,EAAE9B,WAAW,EAAEa,QAAQ,CAAC;EAC5D,OAAOkB,OAAO;AAChB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAC1BC,IAAI,EACJC,GAAG,EACHC,MAAM,EACNC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,SAAS,EACT1B,QAAQ,EACRkB,OAAO,EACPzB,QAAQ,KACL;EACH,IAAIkC,WAAW;EACflC,QAAQ,CAAC;IAAEmC,IAAI,EAAE;EAAoB,CAAC,CAAC;EACvC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAM7B,QAAQ,CAAC8B,SAAS,CAAC,CAAC;IACzCH,WAAW,GAAG,MAAMT,OAAO,CACxBa,OAAO,CAACF,MAAM,CAAC,CACfG,SAAS,CAACZ,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,CAAC;IAC3E,MAAMC,WAAW,CAACM,IAAI,CAAC,CAAC;IACxB;IACAxC,QAAQ,CAAC;MAAEmC,IAAI,EAAE;IAAqB,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChDd,QAAQ,CAAC;MAAEmC,IAAI,EAAE;IAAkB,CAAC,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}