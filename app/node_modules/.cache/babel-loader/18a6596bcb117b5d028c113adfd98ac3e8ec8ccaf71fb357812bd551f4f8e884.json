{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst providerSlice = createSlice({\n  name: 'provider',\n  initialState: {\n    connection: null,\n    chainId: null,\n    account: null,\n    balance: null\n  },\n  reducers: {\n    providerLoaded: (state, action) => {\n      state.connection = action.payload.connection;\n    },\n    networkLoaded: (state, action) => {\n      state.chainId = action.payload.chainId.toString();\n    },\n    accountLoaded: (state, action) => {\n      state.account = action.payload.account;\n    },\n    etherBalanceLoaded: (state, action) => {\n      state.balance = typeof action.payload.balance === 'string' ? action.payload.balance : action.payload.balance.toString();\n    }\n  }\n});\nconst medicalSlice = createSlice({\n  name: 'medical',\n  initialState: {\n    loaded: false,\n    contract: null\n  },\n  reducers: {\n    medicalLoaded: (state, action) => {\n      state.loaded = true;\n      state.contract = action.payload.medical;\n    }\n  }\n});\nexport const {\n  providerLoaded,\n  networkLoaded,\n  accountLoaded,\n  etherBalanceLoaded\n} = providerSlice.actions;\nexport const {\n  medicalLoaded\n} = medicalSlice.actions;\nexport const providerReducer = providerSlice.reducer;\nexport const medicalReducer = medicalSlice.reducer;","map":{"version":3,"names":["createSlice","providerSlice","name","initialState","connection","chainId","account","balance","reducers","providerLoaded","state","action","payload","networkLoaded","toString","accountLoaded","etherBalanceLoaded","medicalSlice","loaded","contract","medicalLoaded","medical","actions","providerReducer","reducer","medicalReducer"],"sources":["D:/HackIndia/my-react-app/app/src/store/reducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst providerSlice = createSlice({\r\n  name: 'provider',\r\n  initialState: {\r\n    connection: null,\r\n    chainId: null,\r\n    account: null,\r\n    balance: null,\r\n  },\r\n  reducers: {\r\n    providerLoaded: (state, action) => {\r\n      state.connection = action.payload.connection;\r\n    },\r\n    networkLoaded: (state, action) => {\r\n      state.chainId = action.payload.chainId.toString();\r\n    },\r\n    accountLoaded: (state, action) => {\r\n      state.account = action.payload.account;\r\n    },\r\n    etherBalanceLoaded: (state, action) => {\r\n      state.balance = typeof action.payload.balance === 'string'\r\n        ? action.payload.balance\r\n        : action.payload.balance.toString();\r\n    },\r\n  },\r\n});\r\n\r\nconst medicalSlice = createSlice({\r\n  name: 'medical',\r\n  initialState: {\r\n    loaded: false,\r\n    contract: null,\r\n  },\r\n  reducers: {\r\n    medicalLoaded: (state, action) => {\r\n      state.loaded = true;\r\n      state.contract = action.payload.medical;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  providerLoaded,\r\n  networkLoaded,\r\n  accountLoaded,\r\n  etherBalanceLoaded,\r\n} = providerSlice.actions;\r\n\r\nexport const { medicalLoaded } = medicalSlice.actions;\r\n\r\nexport const providerReducer = providerSlice.reducer;\r\nexport const medicalReducer = medicalSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,aAAa,GAAGD,WAAW,CAAC;EAChCE,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACC,OAAO,CAACR,UAAU;IAC9C,CAAC;IACDS,aAAa,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACL,OAAO,GAAGM,MAAM,CAACC,OAAO,CAACP,OAAO,CAACS,QAAQ,CAAC,CAAC;IACnD,CAAC;IACDC,aAAa,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACJ,OAAO,GAAGK,MAAM,CAACC,OAAO,CAACN,OAAO;IACxC,CAAC;IACDU,kBAAkB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACH,OAAO,GAAG,OAAOI,MAAM,CAACC,OAAO,CAACL,OAAO,KAAK,QAAQ,GACtDI,MAAM,CAACC,OAAO,CAACL,OAAO,GACtBI,MAAM,CAACC,OAAO,CAACL,OAAO,CAACO,QAAQ,CAAC,CAAC;IACvC;EACF;AACF,CAAC,CAAC;AAEF,MAAMG,YAAY,GAAGjB,WAAW,CAAC;EAC/BE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZe,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE;EACZ,CAAC;EACDX,QAAQ,EAAE;IACRY,aAAa,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACQ,MAAM,GAAG,IAAI;MACnBR,KAAK,CAACS,QAAQ,GAAGR,MAAM,CAACC,OAAO,CAACS,OAAO;IACzC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXZ,cAAc;EACdI,aAAa;EACbE,aAAa;EACbC;AACF,CAAC,GAAGf,aAAa,CAACqB,OAAO;AAEzB,OAAO,MAAM;EAAEF;AAAc,CAAC,GAAGH,YAAY,CAACK,OAAO;AAErD,OAAO,MAAMC,eAAe,GAAGtB,aAAa,CAACuB,OAAO;AACpD,OAAO,MAAMC,cAAc,GAAGR,YAAY,CAACO,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}